{"ast":null,"code":"var _jsxFileName = \"E:\\\\2023\\\\@react\\\\\\uD50C\\uB85C\\uC6B0\\\\hookstest\\\\Hooks\\\\src\\\\hooks\\\\1.basic\\\\q2.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Q2() {\n  _s();\n  const arr = useRef([]);\n  const [forceRender, setForceRender] = useState(false);\n  const inputRef = useRef(\"\"); // inputRef라는 객체 생성 초기값을 \"\" \n\n  const onAddList = () => {\n    const inputValue = inputRef.current.value;\n    arr.current.push(inputValue);\n    setForceRender(prev => !prev);\n    // console.log(arr.current)\n    // console.log(inputValue)  \n  };\n\n  const onClick = () => {\n    forceRender && arr.current.map((arrs, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: arrs\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 53\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBB38\\uC81C2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBB38\\uC81C 2-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: inputRef // 초기값 \"\"배열을 전달하며 input 태그와 연결 \n\n          // value={inputValue} //  input 값 초기화 \n          //onChange={ e => setInputValue(e.target.value)} -->  \n          /** setForceRender((prev) => !prev); 를 만나면 강제 리렌더 되어 변경된 값이 화면에 노출되는 데 \r\n           * 현재 input의 값을 값이 변화하면 바로 리렌더 시키는 state로 받고 있기 때문에 input에 값을 입력만해도 화면에 값이 노출되는 것 \r\n          */\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onAddList,\n          children: \"\\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClick,\n          children: \"\\uC81C\\uCD9C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: forceRender === true ? `` : `제출된 목록이 없습니다`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBB38\\uC81C 2-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \\uC774 \\uBB38\\uAD6C\\uB294 \\uC544\\uB798 \\uBC84\\uD2BC\\uC744 \\uB204\\uB974\\uBA74 \\uC0C9\\uC0C1\\uC774 \\uBC14\\uB01D\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Q2, \"WG5IVu8vuQISKXpIUOs6fyeZl3M=\");\n_c = Q2;\nexport default Q2;\n\n/* \r\n   문제2\r\n\n   2-1)\r\n       useRef에 관련한 문제입니다.\r\n\n       // 강게제런더링 시켜주는 state하나 \r\n       // \r\n\n       추가 버튼을 누르면 input에 있던 value는 배열 arr에 추가됩니다.\r\n       그러나, 추가 버튼을 누를 때마다 강제 랜더링 상태가 무조건 적으로 업데이트 됩니다.\r\n\n       이러한 상황에서 제출버튼을 누르면\r\n\n       지금까지 추가하였던 목록 배열(arr)이 \r\n       <ul>의 li의 항목으로 추가되어야합니다.  \r\n     \r\n\n       만약 제출되었을 때 아무런 항목이 없다면\r\n       <p>제출된 목록이 없습니다</p>이 노출되어야하며\r\n\n       제출된 항목이 있다면\r\n       <ul>만 노출되어야 합니다\r\n\n       이를 useRef의 특성을 고려하여 풀이해보세요 :)\r\n\n   2-2)\r\n       문제 2-2는 변경 버튼을 클릭하면\r\n       p태그의 색상이 다른 색상으로 변경됩니다.\r\n       \r\n       이는 state를 사용하는 것이 가장 올바른 방법이지만\r\n       어를 사용할 수 없는 어쩔 수 없는 상황에 놓여있습니다.\r\n\n       따라서 useRef는 사용하여 해당 문구의 색상을 변경해보세요 :)\r\n */\nvar _c;\n$RefreshReg$(_c, \"Q2\");","map":{"version":3,"names":["useRef","useState","Q2","arr","forceRender","setForceRender","inputRef","onAddList","inputValue","current","value","push","prev","onClick","map","arrs","index"],"sources":["E:/2023/@react/플로우/hookstest/Hooks/src/hooks/1.basic/q2.js"],"sourcesContent":["import { useRef, useState } from \"react\";\r\n\r\nfunction Q2() {\r\n  const arr = useRef([])\r\n  const [forceRender, setForceRender] = useState(false);\r\n  const inputRef = useRef(\"\")  // inputRef라는 객체 생성 초기값을 \"\" \r\n  \r\n  const onAddList = () => {\r\n    const inputValue = inputRef.current.value;\r\n    arr.current.push(inputValue);\r\n    setForceRender((prev) => !prev);\r\n    // console.log(arr.current)\r\n    // console.log(inputValue)  \r\n  };\r\n\r\n  \r\n  const onClick = () =>{\r\n    forceRender &&  arr.current.map((arrs,index) => <li key={index}>{arrs}</li>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>문제2</h1>\r\n      <div>\r\n        <h2>문제 2-1</h2>\r\n        <p> \r\n          <input \r\n            type=\"text\"\r\n            ref={inputRef}  // 초기값 \"\"배열을 전달하며 input 태그와 연결 \r\n\r\n            // value={inputValue} //  input 값 초기화 \r\n            //onChange={ e => setInputValue(e.target.value)} -->  \r\n            /** setForceRender((prev) => !prev); 를 만나면 강제 리렌더 되어 변경된 값이 화면에 노출되는 데 \r\n             * 현재 input의 값을 값이 변화하면 바로 리렌더 시키는 state로 받고 있기 때문에 input에 값을 입력만해도 화면에 값이 노출되는 것 \r\n            */\r\n          />\r\n        </p>\r\n        <p>\r\n          <button onClick={onAddList}>추가</button>\r\n        </p>\r\n        <p>\r\n          <button onClick={onClick}>제출</button>\r\n        </p>\r\n\r\n        <p>{ forceRender === true ?  `` : `제출된 목록이 없습니다`}</p>\r\n        {/* <ul>{inputValue}</ul> */}\r\n      </div>\r\n      <div>\r\n        <h2>문제 2-2</h2>\r\n        <p> 이 문구는 아래 버튼을 누르면 색상이 바뀝니다</p>\r\n        <button>변경</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Q2;\r\n\r\n\r\n /* \r\n    문제2\r\n\r\n    2-1)\r\n        useRef에 관련한 문제입니다.\r\n\r\n        // 강게제런더링 시켜주는 state하나 \r\n        // \r\n\r\n        추가 버튼을 누르면 input에 있던 value는 배열 arr에 추가됩니다.\r\n        그러나, 추가 버튼을 누를 때마다 강제 랜더링 상태가 무조건 적으로 업데이트 됩니다.\r\n\r\n        이러한 상황에서 제출버튼을 누르면\r\n\r\n        지금까지 추가하였던 목록 배열(arr)이 \r\n        <ul>의 li의 항목으로 추가되어야합니다.  \r\n      \r\n\r\n        만약 제출되었을 때 아무런 항목이 없다면\r\n        <p>제출된 목록이 없습니다</p>이 노출되어야하며\r\n\r\n        제출된 항목이 있다면\r\n        <ul>만 노출되어야 합니다\r\n\r\n        이를 useRef의 특성을 고려하여 풀이해보세요 :)\r\n\r\n    2-2)\r\n        문제 2-2는 변경 버튼을 클릭하면\r\n        p태그의 색상이 다른 색상으로 변경됩니다.\r\n        \r\n        이는 state를 사용하는 것이 가장 올바른 방법이지만\r\n        어를 사용할 수 없는 어쩔 수 없는 상황에 놓여있습니다.\r\n\r\n        따라서 useRef는 사용하여 해당 문구의 색상을 변경해보세요 :)\r\n  */\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAEzC,SAASC,EAAE,GAAG;EAAA;EACZ,MAAMC,GAAG,GAAGH,MAAM,CAAC,EAAE,CAAC;EACtB,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMK,QAAQ,GAAGN,MAAM,CAAC,EAAE,CAAC,EAAE;;EAE7B,MAAMO,SAAS,GAAG,MAAM;IACtB,MAAMC,UAAU,GAAGF,QAAQ,CAACG,OAAO,CAACC,KAAK;IACzCP,GAAG,CAACM,OAAO,CAACE,IAAI,CAACH,UAAU,CAAC;IAC5BH,cAAc,CAAEO,IAAI,IAAK,CAACA,IAAI,CAAC;IAC/B;IACA;EACF,CAAC;;EAGD,MAAMC,OAAO,GAAG,MAAK;IACnBT,WAAW,IAAKD,GAAG,CAACM,OAAO,CAACK,GAAG,CAAC,CAACC,IAAI,EAACC,KAAK,kBAAK;MAAA,UAAiBD;IAAI,GAAZC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAa,CAAC;EAC9E,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAI;IAAG;MAAA;MAAA;MAAA;IAAA,QAAK,eACZ;MAAA,wBACE;QAAA,UAAI;MAAM;QAAA;QAAA;QAAA;MAAA,QAAK,eACf;QAAA,uBACE;UACE,IAAI,EAAC,MAAM;UACX,GAAG,EAAEV,QAAS,CAAE;;UAEhB;UACA;UACA;AACZ;AACA;QAFY;UAAA;UAAA;UAAA;QAAA;MAGA;QAAA;QAAA;QAAA;MAAA,QACA,eACJ;QAAA,uBACE;UAAQ,OAAO,EAAEC,SAAU;UAAA,UAAC;QAAE;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACrC,eACJ;QAAA,uBACE;UAAQ,OAAO,EAAEM,OAAQ;UAAA,UAAC;QAAE;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACnC,eAEJ;QAAA,UAAKT,WAAW,KAAK,IAAI,GAAK,EAAC,GAAI;MAAa;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAEjD,eACN;MAAA,wBACE;QAAA,UAAI;MAAM;QAAA;QAAA;QAAA;MAAA,QAAK,eACf;QAAA,UAAG;MAA0B;QAAA;QAAA;QAAA;MAAA,QAAI,eACjC;QAAA,UAAQ;MAAE;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACf;EAAA,gBACL;AAEP;AAAC,GApDQF,EAAE;AAAA,KAAFA,EAAE;AAqDX,eAAeA,EAAE;;AAGhB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}