{"ast":null,"code":"var _jsxFileName = \"E:\\\\2023\\\\@react\\\\\\uD50C\\uB85C\\uC6B0\\\\hookstest\\\\Hooks\\\\src\\\\hooks\\\\2.state\\\\state1.js\",\n  _s = $RefreshSig$();\nimport PlayListMock from \"../../__mock__/playList.json\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction State1() {\n  _s();\n  /* \r\n    문제 1.\r\n      state를 다루기 위한 기초 문제입니다.\r\n    음악 목록 10가지의 mock data가 있습니다.\r\n      아래에 추가버튼을 눌러 목록에 리스트를 추가하고 \r\n    삭제 버턴을 눌렀을 때 데이터가 삭제될 수 있도록 해주세요\r\n  */\n\n  console.log(PlayListMock.playlist);\n  /* 데이터 콘솔에 찍어두었으니 확인해볼 것 */\n\n  // input에 데이터를 받기위한 저장소 1개 \n  // map을이용해서 배열의 객체를 개별 객체로 분활 \n  // 핸들 이벤트 두개 동작 추가 / 삭제로 버튼은 각 한번씩 동작 --> true false가 필요 --> state 하나 \n  // 추가 이벤트  --> return으로 div를 반환하면 된다. \n  // 삭제 이벤트  --> 삭제 filter 사용 \n\n  // 기준1 \n  //-- 1. 데이터의 저장및  변경가능성\n  // -- 2. ui의 변화\n\n  // const [isBoolean, setIsBoolean] = useState(false);\n\n  // 데이터의 변화 \n  const [playList, setPlayLIst] = useState(PlayListMock.playlist);\n  const [inputValue, setInputValue] = useState({\n    title: \"\",\n    signer: \"\"\n  });\n\n  // 상태로 관리되는 두개의 값을 두개의 변수로 만들어 사용하기 \n  // const {title, signer} = inputValue;\n\n  const onChange = e => {\n    // input 이벤트객체를 구성하는 input의 속성들중 속성의 키값을 분리하여 매칭시킬준비하기 \n    const {\n      value,\n      name\n    } = e.target;\n    setInputValue({\n      ...inputValue,\n      [name]: value // name: title, 혹은 signger,  사용자가 입력하는 값에 따라 어느 곳에 입력할지 커서가 켜지고 , 입력되는 값이 value로 \"\" 안에 들어가진다. \n    });\n  };\n\n  const onAddPlayList = () => {\n    setPlayLIst([...playList, inputValue]);\n    setInputValue({\n      title: \"\",\n      signer: \"\"\n    });\n  };\n  const handleDelte = title => {\n    setPlayLIst(playList.filter(item => item.title !== title));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uBB38\\uC81C1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [playList.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.signer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              handleDelte(item.title);\n            },\n            children: \" \\uC0AD\\uC81C \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Summer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Joe Hisaishi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inputValue, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uACE1\\uBA85 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"title\",\n          value: title // 값에 담길걸 변수로 담을 수있께 설정 \n          ,\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uAC00\\uC218/\\uC791\\uACE1 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"signer\",\n          value: signer,\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onAddPlayList,\n          children: \"\\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(State1, \"FMXogxCHDacfQjqUo/ND7Omklng=\");\n_c = State1;\nexport default State1;\nvar _c;\n$RefreshReg$(_c, \"State1\");","map":{"version":3,"names":["PlayListMock","useState","State1","console","log","playlist","playList","setPlayLIst","inputValue","setInputValue","title","signer","onChange","e","value","name","target","onAddPlayList","handleDelte","filter","item","map","index"],"sources":["E:/2023/@react/플로우/hookstest/Hooks/src/hooks/2.state/state1.js"],"sourcesContent":["import PlayListMock from \"../../__mock__/playList.json\";\r\nimport {useState} from 'react'\r\nfunction State1() {\r\n  /* \r\n    문제 1.\r\n\r\n    state를 다루기 위한 기초 문제입니다.\r\n    음악 목록 10가지의 mock data가 있습니다.\r\n\r\n    아래에 추가버튼을 눌러 목록에 리스트를 추가하고 \r\n    삭제 버턴을 눌렀을 때 데이터가 삭제될 수 있도록 해주세요\r\n  */\r\n\r\n  console.log(PlayListMock.playlist);\r\n  /* 데이터 콘솔에 찍어두었으니 확인해볼 것 */\r\n\r\n  // input에 데이터를 받기위한 저장소 1개 \r\n  // map을이용해서 배열의 객체를 개별 객체로 분활 \r\n  // 핸들 이벤트 두개 동작 추가 / 삭제로 버튼은 각 한번씩 동작 --> true false가 필요 --> state 하나 \r\n  // 추가 이벤트  --> return으로 div를 반환하면 된다. \r\n  // 삭제 이벤트  --> 삭제 filter 사용 \r\n\r\n\r\n  // 기준1 \r\n  //-- 1. 데이터의 저장및  변경가능성\r\n  // -- 2. ui의 변화\r\n\r\n\r\n  // const [isBoolean, setIsBoolean] = useState(false);\r\n\r\n  // 데이터의 변화 \r\n  const [playList, setPlayLIst] = useState(PlayListMock.playlist);\r\n  const [inputValue, setInputValue] = useState({\r\n    title: \"\",\r\n    signer : \"\"\r\n  })\r\n\r\n  // 상태로 관리되는 두개의 값을 두개의 변수로 만들어 사용하기 \r\n  // const {title, signer} = inputValue;\r\n\r\n  const onChange = (e) => {\r\n    // input 이벤트객체를 구성하는 input의 속성들중 속성의 키값을 분리하여 매칭시킬준비하기 \r\n    const { value, name } = e.target ;\r\n   setInputValue({\r\n      ...inputValue,\r\n      [name] : value // name: title, 혹은 signger,  사용자가 입력하는 값에 따라 어느 곳에 입력할지 커서가 켜지고 , 입력되는 값이 value로 \"\" 안에 들어가진다. \r\n    })\r\n  };\r\n\r\nconst onAddPlayList = () => {\r\n   setPlayLIst([...playList, inputValue ])\r\n     setInputValue({\r\n       title: \"\",\r\n       signer: \"\",\r\n     });\r\n}\r\n\r\nconst handleDelte = (title) => {\r\n   setPlayLIst(playList.filter((item)=>\r\n   item.title !== title\r\n   ))\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>문제1</h1>\r\n      <ul>\r\n        {/* list */}\r\n        {/* 예시 데이터입니다 */}\r\n        { playList.map((item, index) => {\r\n          return(\r\n            <li key={index}>\r\n            <h3>{item.title}</h3>\r\n            <p>{item.signer}</p>\r\n            <button onClick={() => {handleDelte(item.title)}}> 삭제 </button>\r\n          </li> \r\n          )\r\n        } )}\r\n        <li>\r\n          <h3>Summer</h3>\r\n          <p>Joe Hisaishi</p>\r\n        </li>\r\n      </ul>\r\n      <div>\r\n      {inputValue}\r\n        <p>\r\n          곡명 : <input \r\n                  name=\"title\"\r\n                  value={title} // 값에 담길걸 변수로 담을 수있께 설정 \r\n                  onChange={onChange} />\r\n        </p>\r\n        <p>\r\n          가수/작곡 : <input \r\n                      name=\"signer\"\r\n                      value={signer}\r\n                      onChange={onChange}/>\r\n        </p>\r\n        <p>\r\n          <button onClick={onAddPlayList}>추가</button>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default State1;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}